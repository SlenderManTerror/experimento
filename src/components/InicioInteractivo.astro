---
// HomeInteractions.astro
// Componente para manejar las interacciones de la p√°gina de inicio
---

<script>
    // Card interactions
    function setupCardInteractions() {
        const cards = document.querySelectorAll('.main-card');
        
        cards.forEach(card => {
            card.addEventListener('click', () => {
                const category = card.getAttribute('data-category');
                const cardElement = card as HTMLElement;
                
                // Smooth click effect
                cardElement.style.transform = 'translateY(-12px) scale(1.02)';
                cardElement.style.transition = 'all 0.2s ease';
                
                setTimeout(() => {
                    cardElement.style.transform = '';
                    cardElement.style.transition = 'all 0.3s ease';
                }, 200);
                
                console.log(`Navegando a: ${category}`);
            });
        });
    }

    // Button interactions
    function setupButtonInteractions() {
        const buttons = document.querySelectorAll<HTMLButtonElement>('.hero-btn');
    
        buttons.forEach(button => {
            button.addEventListener('click', (e: MouseEvent) => {
                // Ripple effect
                const ripple = document.createElement('div');
                const rect = button.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;
           
                ripple.style.cssText = `
                    position: absolute;
                    width: ${size}px;
                    height: ${size}px;
                    left: ${x}px;
                    top: ${y}px;
                    background: rgba(255, 255, 255, 0.3);
                    border-radius: 50%;
                    transform: scale(0);
                    animation: ripple 0.6s ease-out;
                    pointer-events: none;
                `;
           
                button.style.position = 'relative';
                button.style.overflow = 'hidden';
                button.appendChild(ripple);

                setTimeout(() => {
                    if (ripple.parentNode) {
                        ripple.remove();
                    }
                }, 600);
            });
        });
    }

    // Scroll animations
    function setupScrollAnimations() {
        const cards = document.querySelectorAll('.main-card');
        const stats = document.querySelectorAll('.stat-item');

        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    (entry.target as HTMLElement).style.opacity = '1';
                    (entry.target as HTMLElement).style.transform = 'translateY(0)';
                }
            });
        }, observerOptions);

        [...cards, ...stats].forEach(element => {
            (element as HTMLElement).style.opacity = '0';
            (element as HTMLElement).style.transform = 'translateY(30px)';
            (element as HTMLElement).style.transition = 'all 0.6s ease';
            observer.observe(element);
        });
    }

    // Initialize all interactions
    function initializeHomeInteractions() {
        setupCardInteractions();
        setupButtonInteractions();
        setupScrollAnimations();
    }

    // Auto-initialize when DOM is loaded
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeHomeInteractions);
    } else {
        initializeHomeInteractions();
    }

    // Add ripple animation styles
    const style = document.createElement('style');
    style.textContent = `
        @keyframes ripple {
            to {
                transform: scale(2);
                opacity: 0;
            }
        }
    `;
    document.head.appendChild(style);
</script>