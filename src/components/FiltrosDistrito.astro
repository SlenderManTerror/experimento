---
// src/components/FiltrosDistrito.astro - VERSIÓN MULTIIDIOMA
import { getTranslations } from '../i18n/utils.js';
import '../styles/global.css';

const currentLang = Astro.currentLocale || 'es';
const t = await getTranslations(currentLang);
---

<div class="bg-[var(--surface)] p-4 rounded-lg mb-4 shadow-sm">
    <h3 class="text-lg font-semibold mb-3">{t.distritos.filters.title}</h3>
    
    <!-- Filtros -->
    <div class="mb-4">
        <label class="label-base mb-2">
            {t.distritos.filters.searchLabel}
        </label>
        <input 
            type="text" 
            id="filtro-distrito"
            class="input-base"
            placeholder={t.distritos.filters.placeholder}
        >
    </div>

    <!-- Ordenamiento -->
    <div class="mb-4">
        <label class="label-base mb-2">
            {t.distritos.filters.sortLabel}
        </label>
        <div class="flex flex-wrap gap-2">
            <button 
                id="orden-alfabetico-asc"
                class="btn-base btn-secondary orden-btn active"
                data-orden="alfabetico-asc"
            >
                A-Z
            </button>
            <button 
                id="orden-alfabetico-desc"
                class="btn-base btn-secondary orden-btn"
                data-orden="alfabetico-desc"
            >
                Z-A
            </button>
            <button 
                id="orden-poblacion-asc"
                class="btn-base btn-secondary orden-btn"
                data-orden="poblacion-asc"
            >
                {t.distritos.filters.populationUp}
            </button>
            <button 
                id="orden-poblacion-desc"
                class="btn-base btn-secondary orden-btn"
                data-orden="poblacion-desc"
            >
                {t.distritos.filters.populationDown}
            </button>
        </div>
    </div>
    
    <!-- Botones de acción -->
    <div class="flex flex-wrap items-center gap-3">
        <button 
            id="limpiar-filtros"
            class="btn-base btn-primary"
        >
            {t.distritos.filters.clearFilters}
        </button>
        <span id="contador-resultados" class="text-sm text-[var(--colorfiltro)]">
            {t.distritos.filters.showing} 30 {t.distritos.filters.of} 30 {t.distritos.filters.districts}
        </span>
    </div>
</div>

<script define:vars={{ t }}>
    // Removed TypeScript interface declaration for Window as it's not supported in .astro files.

    class FiltrosManager {
        ordenActual = 'alfabetico-asc';
        contadorResultados = null;
        filtroDistritoInput = null;
        translations;

        constructor(translations) {
            this.translations = translations;
            this.init();
        }

        init() {
            // Obtener elementos
            this.contadorResultados = document.getElementById('contador-resultados');
            this.filtroDistritoInput = document.getElementById('filtro-distrito');

            // Configurar event listeners
            this.setupEventListeners();
            
            // Inicializar con orden alfabético y contador
            this.ordenarTabla('alfabetico-asc');
            this.actualizarContador();
        }

        setupEventListeners() {
            // Filtro de búsqueda
            this.filtroDistritoInput?.addEventListener('input', () => {
                this.filtrarTabla();
            });

            // Ordenamiento
            const botonesOrden = document.querySelectorAll('.orden-btn');
            botonesOrden.forEach(boton => {
                boton.addEventListener('click', (e) => {
                    e.preventDefault();
                    const criterio = e.target.getAttribute('data-orden');
                    if (criterio) {
                        this.ordenarTabla(criterio);
                    }
                });
            });

            // Limpiar filtros
            const limpiarFiltrosBtn = document.getElementById('limpiar-filtros');
            limpiarFiltrosBtn?.addEventListener('click', () => this.limpiarFiltros());
        }

        ordenarTabla(criterio) {
            const tbody = document.getElementById('tabla-distritos');
            if (!tbody) return;
            
            const filas = Array.from(tbody.querySelectorAll('.distrito-row'));
            
            filas.sort((a, b) => {
                const elementoA = a;
                const elementoB = b;
                
                switch (criterio) {
                    case 'alfabetico-asc':
                        const nombreA = elementoA.getAttribute('data-distrito') || '';
                        const nombreB = elementoB.getAttribute('data-distrito') || '';
                        return nombreA.localeCompare(nombreB, 'es', { sensitivity: 'base' });
                        
                    case 'alfabetico-desc':
                        const nombreDescA = elementoA.getAttribute('data-distrito') || '';
                        const nombreDescB = elementoB.getAttribute('data-distrito') || '';
                        return nombreDescB.localeCompare(nombreDescA, 'es', { sensitivity: 'base' });
                        
                    case 'poblacion-asc':
                        const poblacionAscA = parseInt(elementoA.getAttribute('data-poblacion') || '0');
                        const poblacionAscB = parseInt(elementoB.getAttribute('data-poblacion') || '0');
                        return poblacionAscA - poblacionAscB;
                        
                    case 'poblacion-desc':
                        const poblacionDescA = parseInt(elementoA.getAttribute('data-poblacion') || '0');
                        const poblacionDescB = parseInt(elementoB.getAttribute('data-poblacion') || '0');
                        return poblacionDescB - poblacionDescA;
                        
                    default:
                        return 0;
                }
            });
            
            // Reordenar elementos en el DOM
            filas.forEach(fila => tbody.appendChild(fila));
            
            // Actualizar botón activo
            this.actualizarBotonActivo(criterio);
            
            // Actualizar contador después de ordenar
            this.actualizarContador();
        }

        actualizarBotonActivo(criterio) {
            const botones = document.querySelectorAll('.orden-btn');
            botones.forEach(btn => {
                btn.classList.remove('active');
            });
            
            const botonActivo = document.querySelector(`[data-orden="${criterio}"]`);
            botonActivo?.classList.add('active');
            
            this.ordenActual = criterio;
        }

        filtrarTabla() {
            const filtroDistrito = this.filtroDistritoInput?.value.toLowerCase() || '';
            const filas = document.querySelectorAll('.distrito-row');
            let contadorVisible = 0;
            
            filas.forEach(fila => {
                const nombreDistritoAttr = fila.getAttribute('data-distrito');
                const nombreDistrito = nombreDistritoAttr ? nombreDistritoAttr.toLowerCase() : '';

                // Filtro por nombre de distrito
                const coincideDistrito = nombreDistrito.includes(filtroDistrito);
                
                // Mostrar u ocultar la fila
                if (coincideDistrito) {
                    fila.style.display = '';
                    contadorVisible++;
                } else {
                    fila.style.display = 'none';
                }
            });
            
            this.actualizarContador();
        }

        actualizarContador() {
            if (this.contadorResultados) {
                const totalFilas = document.querySelectorAll('.distrito-row').length;
                const filasVisibles = document.querySelectorAll('.distrito-row:not([style*="display: none"])').length;
                
                // Usar las traducciones para el contador
                const filters = this.translations.distritos.filters;
                this.contadorResultados.textContent = `${filters.showing} ${filasVisibles} ${filters.of} ${totalFilas} ${filters.districts}`;
            }
        }

        limpiarFiltros() {
            // Limpiar input de búsqueda
            if (this.filtroDistritoInput) {
                this.filtroDistritoInput.value = '';
            }
            
            // Mostrar todas las filas
            const filas = document.querySelectorAll('.distrito-row');
            filas.forEach(fila => {
                fila.style.display = '';
            });

            // Restablecer orden alfabético
            this.ordenarTabla('alfabetico-asc');
            
            // Actualizar contador
            this.actualizarContador();
        }

        // Método público para actualizar contador desde externa
        actualizarContadorPublico() {
            this.actualizarContador();
        }
    }

    // Inicializar cuando el DOM esté listo
    document.addEventListener('DOMContentLoaded', () => {
        const filtrosManager = new FiltrosManager(t);

        // Hacer disponible globalmente si es necesario
        window.FiltrosManager = filtrosManager;
    });
</script>